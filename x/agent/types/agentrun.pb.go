// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: agent/agent/agentrun.proto

package types

import (
	fmt "fmt"
	proto "github.com/cosmos/gogoproto/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Agentrun struct {
	Query           string   `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	Responses       []string `protobuf:"bytes,2,rep,name=responses,proto3" json:"responses,omitempty"`
	Functioncalls   []string `protobuf:"bytes,3,rep,name=functioncalls,proto3" json:"functioncalls,omitempty"`
	Functionresults []string `protobuf:"bytes,4,rep,name=functionresults,proto3" json:"functionresults,omitempty"`
	Isfinished      bool     `protobuf:"varint,5,opt,name=isfinished,proto3" json:"isfinished,omitempty"`
	Id              uint64   `protobuf:"varint,6,opt,name=id,proto3" json:"id,omitempty"`
	Prompt          uint64   `protobuf:"varint,7,opt,name=prompt,proto3" json:"prompt,omitempty"`
}

func (m *Agentrun) Reset()         { *m = Agentrun{} }
func (m *Agentrun) String() string { return proto.CompactTextString(m) }
func (*Agentrun) ProtoMessage()    {}
func (*Agentrun) Descriptor() ([]byte, []int) {
	return fileDescriptor_8eaac9178bd59d4a, []int{0}
}
func (m *Agentrun) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Agentrun) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Agentrun.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Agentrun) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Agentrun.Merge(m, src)
}
func (m *Agentrun) XXX_Size() int {
	return m.Size()
}
func (m *Agentrun) XXX_DiscardUnknown() {
	xxx_messageInfo_Agentrun.DiscardUnknown(m)
}

var xxx_messageInfo_Agentrun proto.InternalMessageInfo

func (m *Agentrun) GetQuery() string {
	if m != nil {
		return m.Query
	}
	return ""
}

func (m *Agentrun) GetResponses() []string {
	if m != nil {
		return m.Responses
	}
	return nil
}

func (m *Agentrun) GetFunctioncalls() []string {
	if m != nil {
		return m.Functioncalls
	}
	return nil
}

func (m *Agentrun) GetFunctionresults() []string {
	if m != nil {
		return m.Functionresults
	}
	return nil
}

func (m *Agentrun) GetIsfinished() bool {
	if m != nil {
		return m.Isfinished
	}
	return false
}

func (m *Agentrun) GetId() uint64 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Agentrun) GetPrompt() uint64 {
	if m != nil {
		return m.Prompt
	}
	return 0
}

func init() {
	proto.RegisterType((*Agentrun)(nil), "agent.agent.Agentrun")
}

func init() { proto.RegisterFile("agent/agent/agentrun.proto", fileDescriptor_8eaac9178bd59d4a) }

var fileDescriptor_8eaac9178bd59d4a = []byte{
	// 239 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x5c, 0xd0, 0x41, 0x4a, 0xc4, 0x30,
	0x14, 0x06, 0xe0, 0xa6, 0x33, 0x53, 0xa7, 0x4f, 0x54, 0x78, 0x8a, 0x04, 0x91, 0x50, 0xc4, 0x45,
	0x36, 0x8e, 0x0b, 0x4f, 0xa0, 0x47, 0xe8, 0xd2, 0xdd, 0x38, 0xcd, 0x68, 0xa0, 0x26, 0x31, 0x2f,
	0x01, 0xe7, 0x16, 0x1e, 0xcb, 0xe5, 0xac, 0xc4, 0xa5, 0xb4, 0x17, 0x11, 0x32, 0x15, 0xab, 0x9b,
	0x07, 0xff, 0xf7, 0xfe, 0xd5, 0x0f, 0x67, 0xcb, 0x47, 0x65, 0xc2, 0xf5, 0xe8, 0xfa, 0x68, 0x16,
	0xce, 0xdb, 0x60, 0x71, 0x3f, 0xe5, 0x45, 0xba, 0x17, 0x1f, 0x0c, 0xe6, 0xb7, 0xc3, 0x1f, 0x4f,
	0x60, 0xf6, 0x12, 0x95, 0xdf, 0x70, 0x56, 0x31, 0x59, 0xd6, 0xbb, 0x80, 0xe7, 0x50, 0x7a, 0x45,
	0xce, 0x1a, 0x52, 0xc4, 0xf3, 0x6a, 0x22, 0xcb, 0xfa, 0x17, 0xf0, 0x12, 0x0e, 0xd6, 0xd1, 0xac,
	0x82, 0xb6, 0x66, 0xb5, 0x6c, 0x5b, 0xe2, 0x93, 0xd4, 0xf8, 0x8b, 0x28, 0xe1, 0xe8, 0x07, 0xbc,
	0xa2, 0xd8, 0x06, 0xe2, 0xd3, 0xd4, 0xfb, 0xcf, 0x28, 0x00, 0x34, 0xad, 0xb5, 0xd1, 0xf4, 0xa4,
	0x1a, 0x3e, 0xab, 0x98, 0x9c, 0xd7, 0x23, 0xc1, 0x43, 0xc8, 0x75, 0xc3, 0x8b, 0x8a, 0xc9, 0x69,
	0x9d, 0xeb, 0x06, 0x4f, 0xa1, 0x70, 0xde, 0x3e, 0xbb, 0xc0, 0xf7, 0x92, 0x0d, 0xe9, 0xee, 0xea,
	0xbd, 0x13, 0x6c, 0xdb, 0x09, 0xf6, 0xd5, 0x09, 0xf6, 0xd6, 0x8b, 0x6c, 0xdb, 0x8b, 0xec, 0xb3,
	0x17, 0xd9, 0xfd, 0xf1, 0x6e, 0x95, 0xd7, 0x61, 0x9d, 0xb0, 0x71, 0x8a, 0x1e, 0x8a, 0xb4, 0xcd,
	0xcd, 0x77, 0x00, 0x00, 0x00, 0xff, 0xff, 0x99, 0xee, 0xef, 0xd8, 0x39, 0x01, 0x00, 0x00,
}

func (m *Agentrun) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Agentrun) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Agentrun) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Prompt != 0 {
		i = encodeVarintAgentrun(dAtA, i, uint64(m.Prompt))
		i--
		dAtA[i] = 0x38
	}
	if m.Id != 0 {
		i = encodeVarintAgentrun(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x30
	}
	if m.Isfinished {
		i--
		if m.Isfinished {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Functionresults) > 0 {
		for iNdEx := len(m.Functionresults) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Functionresults[iNdEx])
			copy(dAtA[i:], m.Functionresults[iNdEx])
			i = encodeVarintAgentrun(dAtA, i, uint64(len(m.Functionresults[iNdEx])))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Functioncalls) > 0 {
		for iNdEx := len(m.Functioncalls) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Functioncalls[iNdEx])
			copy(dAtA[i:], m.Functioncalls[iNdEx])
			i = encodeVarintAgentrun(dAtA, i, uint64(len(m.Functioncalls[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Responses) > 0 {
		for iNdEx := len(m.Responses) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Responses[iNdEx])
			copy(dAtA[i:], m.Responses[iNdEx])
			i = encodeVarintAgentrun(dAtA, i, uint64(len(m.Responses[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = encodeVarintAgentrun(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintAgentrun(dAtA []byte, offset int, v uint64) int {
	offset -= sovAgentrun(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Agentrun) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + sovAgentrun(uint64(l))
	}
	if len(m.Responses) > 0 {
		for _, s := range m.Responses {
			l = len(s)
			n += 1 + l + sovAgentrun(uint64(l))
		}
	}
	if len(m.Functioncalls) > 0 {
		for _, s := range m.Functioncalls {
			l = len(s)
			n += 1 + l + sovAgentrun(uint64(l))
		}
	}
	if len(m.Functionresults) > 0 {
		for _, s := range m.Functionresults {
			l = len(s)
			n += 1 + l + sovAgentrun(uint64(l))
		}
	}
	if m.Isfinished {
		n += 2
	}
	if m.Id != 0 {
		n += 1 + sovAgentrun(uint64(m.Id))
	}
	if m.Prompt != 0 {
		n += 1 + sovAgentrun(uint64(m.Prompt))
	}
	return n
}

func sovAgentrun(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozAgentrun(x uint64) (n int) {
	return sovAgentrun(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Agentrun) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowAgentrun
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Agentrun: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Agentrun: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentrun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentrun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Responses", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentrun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentrun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Responses = append(m.Responses, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Functioncalls", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentrun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentrun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Functioncalls = append(m.Functioncalls, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Functionresults", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthAgentrun
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthAgentrun
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Functionresults = append(m.Functionresults, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Isfinished", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Isfinished = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Prompt", wireType)
			}
			m.Prompt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowAgentrun
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Prompt |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipAgentrun(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthAgentrun
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipAgentrun(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowAgentrun
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentrun
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowAgentrun
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthAgentrun
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupAgentrun
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthAgentrun
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthAgentrun        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowAgentrun          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupAgentrun = fmt.Errorf("proto: unexpected end of group")
)
